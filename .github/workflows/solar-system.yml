name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'


env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: Unit Testing
        strategy:
            matrix:
              nodejs_version: [18, 19, 20]
              os: [ubuntu-latest]
              exclude: 
                  - nodejs_version: 18
                    os: macos-latest
        runs-on: ${{matrix.os}}
        steps:
        - name: Checkout Repository 
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{matrix.nodejs_version}}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          if: always() 
          with:
            name: Mocha-Test-Result-node${{ matrix.nodejs_version }}-${{ matrix.os }}
            path: test-results.xml

    code-coverage:
        name: code coverage
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository 
          uses: actions/checkout@v4

        - name: Setup NodeJS Version 
          uses: actions/setup-node@v3
          with:
            node-version: 18
          #install cache to speed up workflows
          #after making changes int he lock.json file it will save cache and next time it will use those cache
        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with: 
           path: node_modules
           key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}} # name of the machine where it is running currently, whenever json file modify cache update

        - name: Install Dependencies
          run: npm install
    
        - name: Check code coverage
          continue-on-error: true
          run: npm run coverage
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          if: always() 
          with:
            name: Code-coverage-result
            path: coverage
            retention-days: 4

    docker:
        name: Containerizations
        needs: [unit-testing, code-coverage] # will only run after these jobs.
        permissions: 
           packages: write
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repo #current repo
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: . # find docker file in the root folder
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} # means use the commit id for tag
        
        - name: Docker Image Testing
          run: | # using pipe will run these cmds in sequence. 
            docker images
            docker run --name solar-system-app -d  \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            # to run the docker we needs its IP: 
              
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            
            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live

            